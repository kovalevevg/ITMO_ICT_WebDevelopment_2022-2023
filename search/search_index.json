{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022","text":""},{"location":"#k33422","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u0432\u0430\u043b\u0435\u0432\u0430 \u0415\u0432\u0433\u0435\u043d\u0438\u044f K33422","text":""},{"location":"pages/lab1/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161","text":""},{"location":"pages/lab1/#1","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1","text":"<ul> <li><code>server.py</code></li> </ul> <pre><code>import socket\n\nsock = socket.socket()\nsock.bind(('', 9090))\nsock.listen(1)\nconn, addr = sock.accept()\n\nwhile True:\n    data = conn.recv(1024)\n    if not data:\n        break\n    conn.send('Hello, client.'.encode('utf-8'))\n    print(data.decode('utf-8'))\nconn.close()\n</code></pre> <ul> <li><code>client.py</code></li> </ul> <pre><code>import socket\n\nsock = socket.socket()\nsock.connect(('localhost', 9090))\nsock.send('Hello, server.'.encode('utf-8'))\n\ndata = sock.recv(1024)\nprint(data.decode('utf-8'))\nsock.close()\n</code></pre>"},{"location":"pages/lab1/#2","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2","text":"<ul> <li><code>server.py</code></li> </ul> <pre><code>import socket\nfrom math import sqrt\n\ns = socket.socket()\n\ns.bind(('localhost', 9090))\ns.listen(1)\nconn, addr = s.accept()\n\nwhile True:\n    data = conn.recv(1024)\n    if not data:\n        break\n    list_of_coef = data.decode('utf-8').split(',')\n\n    discr = float(list_of_coef[1]) ** 2 - 4 * float(list_of_coef[0]) * float(list_of_coef[2])\n\n    if discr &gt; 0:\n        result = '\u041a\u043e\u0440\u043d\u0438 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: ' + \\\n                 str(round((-float(list_of_coef[1]) + sqrt(discr)) / (2 * float(list_of_coef[0])), 2)) + ' ' + \\\n                 str(round((-float(list_of_coef[1]) - sqrt(discr)) / (2 * float(list_of_coef[0])), 2))\n        conn.send(result.encode('utf-8'))\n    elif discr == 0:\n        result = '\u041a\u043e\u0440\u0435\u043d\u044c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: ' + str(round(-float(list_of_coef[1]) / (2 * float(list_of_coef[0])), 2))\n        conn.send(result.encode('utf-8'))\n    else:\n        conn.send('\u0414\u0438\u0441\u043a\u0440\u0438\u043c\u0438\u043d\u0430\u043d\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 0. \u041d\u0435\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u0439'.encode('utf-8'))\nconn.close()\n\n</code></pre> <ul> <li><code>client.py</code></li> </ul> <pre><code>import socket\n\ns = socket.socket()\ns.connect(('localhost', 9090))\n\nprint('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f')\n\na, b, c = map(float, input().split())\ns.send((str(a) + ',' + str(b) + ',' + str(c)).encode('utf-8'))\n\nanswer = s.recv(1024)\nprint(answer.decode('utf-8'))\n\ns.close()\n</code></pre>"},{"location":"pages/lab1/#3","title":"\u0417\u0430\u0434\u0430\u0447\u0430 3","text":"<ul> <li><code>server.py</code></li> </ul> <pre><code>import socket\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind((\"localhost\", 2468))\nserver.listen()\n\nwhile True:\n    connection, address = server.accept()\n    page = open(\"index.html\")\n    info = page.read()\n    page.close()\n    data = \"HTTP/1.1 200 OK\\r\\nContent-Type: text/html; charset=utf-8\\r\\n\\r\\n\" + info\n    connection.sendto(data.encode(\"utf-8\"), address)\n    break\n\nconnection.close()\n</code></pre> <ul> <li><code>client.py</code></li> </ul> <pre><code>import socket\n\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient.connect((\"localhost\", 2468))\ndata = client.recv(20480)\nprint(data.decode(\"utf-8\"))\nclient.close()\n</code></pre> <ul> <li><code>index.html</code></li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello, client!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;tml&gt;\n</code></pre>"},{"location":"pages/lab1/#4","title":"\u0417\u0430\u0434\u0430\u0447\u0430 4","text":"<ul> <li><code>server.py</code></li> </ul> <pre><code>import socket\nimport threading\n\nhost = \"localhost\"\nport = 2465\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind((host, port))\nserver.listen()\nprint(\"The chat has been started!\")\n\nclients = []\nusers = []\n\n\ndef broadcast(message, client):\n    for i in clients:\n        if i != client:\n            i.send(message)\n\n\ndef handle(client):\n    while True:\n        message = client.recv(8192)\n        broadcast(message, client)\n\n\ndef receive():\n    while True:\n        connection, address = server.accept()\n        message = \"What's your username?\"\n        connection.sendto(message.encode(\"utf-8\"), address)\n        user = connection.recv(8192).decode(\"utf-8\")\n        users.append(user)\n        clients.append(connection)\n        thread = threading.Thread(target=handle, args=(connection, ))\n        thread.start()\n\n\nreceive()\n</code></pre> <ul> <li><code>client.py</code></li> </ul> <pre><code>import socket\nimport threading\n\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient.connect((\"localhost\", 2465))\nuser = input(\"Enter your name: \")\n\n\ndef receiving_message():\n    while True:\n        message = client.recv(8192)\n        message = message.decode(\"utf-8\")\n        if message == \"What's your username?\":\n            client.sendto(user.encode(\"utf-8\"), (\"localhost\", 2467))\n        else:\n            print(message)\n\n\ndef sending_message():\n    while True:\n        text = input(\"\")\n        message = (f\"{user}: {text}\")\n        client.sendto(message.encode(\"utf-8\"), (\"localhost\", 2467))\n\n\nreceive_thread = threading.Thread(target=receiving_message)\nsending_thread = threading.Thread(target=sending_message)\nreceive_thread.start()\nsending_thread.start()\n</code></pre>"},{"location":"pages/lab1/#5","title":"\u0417\u0430\u0434\u0430\u0447\u0430 5","text":"<ul> <li><code>server.py</code></li> </ul> <pre><code>import socket\n\nclass Response:\n    def __init__(self, status, reason, headers=None, body=None):\n        self.status = status\n        self.reason = reason\n        self.headers = headers\n        self.body = body\n\nclass MyHTTPServer:\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n        self.marks = {}\n\n    def serve_forever(self):\n        server = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n        address = (self.host, self.port)\n\n        try:\n            server.bind(address)\n            server.listen()\n            while True:\n                client, address = server.accept()\n                self.serve_client(client)\n        except KeyboardInterrupt:\n            server.close()\n\n    def serve_client(self, client):\n        try:\n            data = client.recv(4096).decode(\"utf-8\")\n            request = self.parse_request(data)\n            result = self.handle_request(request)\n            self.send_response(client, result)\n        except Exception as e:\n            print('Client serving failed', e)\n        client.close()\n\n    def parse_request(self, data):\n        request = data.rstrip('\\r\\n')\n        text = request[:data.index(\"\\n\")].split()\n\n        if len(text) != 3:\n            raise Exception('Malformed request line')\n\n        method, target, version = text\n        if version != 'HTTP/1.1':\n            raise Exception('Unexpected HTTP version')\n\n        request = {'data': {}, 'method': method}\n        if '?' in target:\n            request['method'] = 'POST'\n            data = target.split('?')[1].split('&amp;')\n            for value in data:\n                index, info = value.split('=')\n                request['data'][index] = info\n\n        return request\n\n    def handle_request(self, request):\n        if request['method'] == 'POST':\n            return self.handle_post(request)\n        else:\n            return self.handle_get()\n\n    def handle_get(self):\n        type = \"text/html; charset=utf-8\"\n        first_settings = \"&lt;html&gt;&lt;head&gt;&lt;style&gt;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;\"\n        course = \"&lt;form&gt;&lt;label&gt;Name of discipline: &lt;/label&gt;&lt;input name='course' /&gt;&lt;br&gt;&lt;br&gt;\"\n        points = \"&lt;label&gt;Number of points: &lt;/label&gt;&lt;input name='points' /&gt;&lt;br&gt;&lt;br&gt;\"\n        button = \"&lt;input type='submit'&gt;&lt;/form&gt;\"\n        body = first_settings + course + points + button\n        for course_name in self.marks:\n            body += f\"&lt;div&gt;&lt;span&gt;{course_name}: {self.marks[course_name]}&lt;/span&gt;&lt;/div&gt;\"\n        second_settings = \"&lt;/body&gt;&lt;/html&gt;\"\n        body += second_settings\n        body = body.encode(\"utf-8\")\n        headers = [(\"Content-Type\", type),\n                   (\"Content-Length\", len(body))]\n        return Response(200, \"OK\", headers, body)\n\n    def handle_post(self, request):\n        course = request[\"data\"][\"course\"]\n        points = request[\"data\"][\"points\"]\n\n        if course not in self.marks:\n            self.marks[course] = []\n\n        self.marks[course].append(points)\n\n        return self.handle_get()\n\n    def send_response(self, connection, response):\n        file = connection.makefile('wb')\n        status_line = f\"HTTP/1.1 {response.status} {response.reason}\\r\\n\"\n        status_line = status_line.encode(\"utf-8\")\n        file.write(status_line)\n\n        if response.headers:\n            for (key, value) in response.headers:\n                header_line = f\"{key}: {value}\\r\\n\"\n                file.write(header_line.encode(\"utf-8\"))\n\n        file.write(b\"\\r\\n\")\n\n        if response.body:\n            file.write(response.body)\n\n        file.flush()\n        file.close()\n\n\nif __name__ == '__main__':\n    host = 'localhost'\n    port = 1405\n    server = MyHTTPServer(host, port)\n    try:\n        server.serve_forever()\n    except KeyboardInterrupt:\n        pass\n</code></pre>"},{"location":"pages/lab2/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162","text":""},{"location":"pages/lab2/#5","title":"\u0412\u0430\u0440\u0438\u0430\u043d\u0442 5.","text":"<p>\u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0443\u0447\u043d\u044b\u0445 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439</p> <p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b:</p> <ul> <li>\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.</li> <li>\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0430\u0432\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439.</li> <li>\u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435.</li> <li>\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043d \u043a \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u043d\u0435\u0442) \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django- admin. </li> <li>\u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c.</li> </ul>"},{"location":"pages/lab2/#_1","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"<ul> <li><code>models.py</code></li> </ul> <pre><code>from django.db import models\nfrom django.contrib.auth.models import AbstractUser\nfrom django.conf import settings\n\nclass User(AbstractUser):\n    username = models.CharField(max_length=30, unique=True)\n    password = models.CharField(max_length=30)\n    # \u0444\u0430\u043c\u0438\u043b\u0438\u044f\n    surname = models.CharField(max_length=30)\n    # \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e\n    lastname = models.CharField(max_length=30)\n    passport = models.CharField(max_length=10, blank=True, null=True)\n\n    def __str__(self):\n        return self.username\n\n\nclass Conference(models.Model):\n    members = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name='members')\n    name = models.CharField(max_length=200)\n    date = models.DateField()\n\n    def __str__(self):\n        return self.name\n\n\nclass Comment(models.Model):\n    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)\n    conference = models.ForeignKey(Conference, on_delete=models.SET_NULL, null=True)\n    rating = models.IntegerField(choices=[(i, i) for i in range(1, 10)])\n    text = models.CharField(max_length=400, blank=True, null=True)\n    created = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return self.text\n</code></pre> <ul> <li><code>views.py</code></li> </ul> <pre><code>from django.contrib import messages\nfrom django.contrib.auth import login, logout\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.views.generic import FormView, ListView, CreateView, DeleteView, DetailView\n\nfrom django.shortcuts import render, redirect\n\nfrom .models import *\nfrom .forms import *\n\n\nclass LoginView(FormView):\n    form_class = UserLoginForm\n    template_name = 'login.html'\n\n    def post(self, request, *args, **kwargs):\n\n        print(request.POST)\n        form = UserLoginForm(data=request.POST)\n\n        if form.is_valid():\n            print('valid')\n            user = form.get_user()\n            login(request, user)\n            return redirect('conflist_route')\n        else:\n            print('not valid')\n            messages.error(request, '\u0423\u043a\u0430\u0437\u0430\u043d\u044b \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435')\n\n        return redirect('login_route')\n\n    def get(self, request, *args, **kwargs):\n        if request.user.is_authenticated:\n            return redirect('conflist_route')\n        else:\n            return render(request, 'login.html')\n\n\ndef logout_view(request):\n    logout(request)\n    return redirect('login_route')\n\n\nclass SignupView(FormView):\n    form_class = UserRegisterForm\n    template_name = 'signup.html'\n\n    def post(self, request, *args, **kwargs):\n        form = UserRegisterForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            # login(request, user)\n            messages.success(request, '\u0423\u0441\u043f\u0435\u0448\u043d\u0430\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f')\n            return redirect('login_route')\n        else:\n            if User.objects.filter(username=request.POST['username']).exists():\n                messages.error(request, '\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d')\n            else:\n                messages.error(request, '\u041e\u0448\u0438\u0431\u043a\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438')\n\n        return redirect('signup_route')\n\n\nclass ConferenceView(LoginRequiredMixin, ListView):\n    model = Conference\n    template_name = 'conference_list.html'\n    context_object_name = 'conferences'\n\n@login_required\ndef join_or_leave_conf_view(request, conf_pk, user_pk):\n    conf = Conference.objects.get(pk=conf_pk)\n    user = User.objects.get(pk=user_pk)\n\n    if user in conf.members.all():\n        conf.members.remove(user)\n    else:\n        conf.members.add(user)\n\n    return redirect('conflist_route')\n\n\n@login_required\ndef user_confs_view(request, username):\n    all_confs = Conference.objects.all()\n    user_confs = []\n\n    for conf in all_confs:\n        if request.user in conf.members.all():\n            user_confs.append(conf)\n\n    return render(request, 'user_confs.html', {'user_confs': user_confs})\n\n\nclass DetailConfView(LoginRequiredMixin, DetailView):\n    model = Conference\n    template_name = 'detail_conference.html'\n    context_object_name = 'conf'\n    pk_url_kwarg = 'conf_pk'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        conf_pk = self.kwargs['conf_pk']\n        comments = Comment.objects.filter(conference__pk=conf_pk).order_by('-created')\n        context['comments'] = comments\n        return context\n\n\n@login_required\ndef comment_view(request, conf_pk):\n    user_obj = User.objects.get(pk=request.user.pk)\n    conference = Conference.objects.get(pk=conf_pk)\n\n    comment_text = request.POST['comment_text']\n\n    if str(comment_text).isspace():\n        messages.error(request, '\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u043c')\n    else:\n        comment_obj = Comment.objects.create(\n            author=user_obj,\n            conference=conference,\n            rating=0,\n            text=comment_text\n        )\n\n    return redirect('detail_conf_route', conf_pk=conf_pk)\n\n\n@login_required\ndef remove_comment_view(request, conf_pk, comment_pk):\n    comment_obj = Comment.objects.get(pk=comment_pk).delete()\n    return redirect('detail_conf_route', conf_pk=conf_pk)\n\n\n@login_required\ndef conf_members_view(request, conf_pk):\n    conference = Conference.objects.get(pk=conf_pk)\n    members = conference.members.all()\n    context = {\n        'members': members,\n        'conf': conference\n    }\n    return render(request, 'conf_members.html', context)\n</code></pre> <ul> <li><code>forms.py</code></li> </ul> <pre><code>from .models import *\nfrom django import forms\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\n\nclass UserLoginForm(AuthenticationForm):\n    username = forms.CharField(label='\u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f', widget=forms.TextInput(attrs={'class': 'form-control'})),\n    password = forms.CharField(label='\u041f\u0430\u0440\u043e\u043b\u044c', widget=forms.PasswordInput(attrs={'class': 'form-control'}))\n\n\nclass UserRegisterForm(UserCreationForm):\n    username = forms.CharField(label='\u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f'),\n    surname = forms.CharField(label='\u0424\u0430\u043c\u0438\u043b\u0438\u044f'),\n    lastname = forms.CharField(label='\u041e\u0442\u0447\u0435\u0441\u0442\u0432\u043e'),\n    password1 = forms.CharField(label='\u041f\u0430\u0440\u043e\u043b\u044c'),\n    password2 = forms.CharField(label='\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f')\n\n    class Meta:\n        model = User\n        fields = ('username', 'surname', 'lastname', 'password1', 'password2')\n</code></pre> <ul> <li><code>urls.py</code></li> </ul> <pre><code>from django.urls import path\n\nfrom .views import *\n\nurlpatterns = [\n    path('', LoginView.as_view(), name='login_route'),\n    path('signup', SignupView.as_view(), name='signup_route'),\n    path('conflist', ConferenceView.as_view(), name='conflist_route'),\n\n    path('logout', logout_view, name='logout_route'),\n    path('join_conf/&lt;int:conf_pk&gt;/&lt;int:user_pk&gt;/', join_or_leave_conf_view, name='join_or_leave_conf_route'),\n    path('user_confs/&lt;str:username&gt;/', user_confs_view, name='user_confs_route'),\n\n    path('conf/&lt;int:conf_pk&gt;/', DetailConfView.as_view(), name='detail_conf_route'),\n\n    path('comment/create/&lt;int:conf_pk&gt;/', comment_view, name='add_comment_route'),\n    path('comment/delete/&lt;int:conf_pk&gt;/&lt;int:comment_pk&gt;/', remove_comment_view, name='remove_comment_route'),\n    path('conf/&lt;int:conf_pk&gt;/members', conf_members_view, name='conf_members_route')\n]\n</code></pre>"},{"location":"pages/lab3/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163","text":""},{"location":"pages/lab3/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0422\u0430\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u043a\u043d\u0438\u0433\u0430\u0445, \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u0430\u0445.</p> <p>\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438, \u0430\u0432\u0442\u043e\u0440 (\u044b), \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e, \u0433\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f, \u0440\u0430\u0437\u0434\u0435\u043b, \u0447\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u043b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0448\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0434\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c. \u041a\u043d\u0438\u0433\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0437\u0430\u043b\u0435.</p> <p>\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430, \u0424\u0418\u041e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f, \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0434\u0430\u0442\u0443 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f, \u0430\u0434\u0440\u0435\u0441, \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438.</p> <p>\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u0438 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0437\u0430\u043b\u043e\u043c, \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0437\u0430\u043b \u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u0432\u044b\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.</p> <p>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0437\u0430\u043b\u0435.</p> <p>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0441\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435. \u0428\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0430 \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438.</p>"},{"location":"pages/lab3/#_2","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0441 \u043a\u043e\u0434\u043e\u043c","text":"<ul> <li><code>models.py</code></li> </ul> <pre><code>from django.db import models\nfrom django.contrib.auth.models import AbstractUser\nfrom django.conf import settings\n\n\nclass User(AbstractUser):\n    READER = 1\n    AUTHOR = 2\n    LIBRARY_WORKER = 3\n\n    ROLE_CHOICES = [\n        (READER, '\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c'),\n        (AUTHOR, '\u0410\u0432\u0442\u043e\u0440'),\n        (LIBRARY_WORKER, '\u0420\u0430\u0431\u043e\u0442\u043d\u0438\u043a \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438')\n    ]\n    role = models.PositiveSmallIntegerField(choices=ROLE_CHOICES, default=READER)\n\n    surname = models.CharField(max_length=30, unique=False, blank=True, null=True)\n    lastname = models.CharField(max_length=30, unique=False, blank=True, null=True)\n\n    # \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430\n    library_card_number = models.CharField(max_length=20, unique=True)\n\n    register_date = models.DateField(blank=True, null=True)\n\n    # \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0437\u0430\u043b\n    reader_room = models.ForeignKey('ReadingRoom', on_delete=models.CASCADE, blank=True, null=True)\n\n    # \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\n    passport_code = models.CharField(max_length=11, default='5700 620000', blank=True)\n\n    birth_date = models.DateField(default='1989-01-10', blank=True)\n    home_address = models.CharField(max_length=150, default='some address', blank=True)\n    phone = models.CharField(max_length=11, unique=True)\n\n    SECONDARY = 1\n    HIGH = 2\n\n    education_choises = [\n        (SECONDARY, '\u0421\u0440\u0435\u0434\u043d\u0435\u0435'),\n        (HIGH, '\u0412\u044b\u0441\u0448\u0435\u0435'),\n    ]\n    education = models.PositiveSmallIntegerField(choices=education_choises, blank=True, null=True)\n    # \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438\n    is_have_degree = models.BooleanField(default=False, blank=True)\n\n    def __str__(self):\n        return f'{self.username}'\n\n\nclass Publisher(models.Model):\n    name = models.CharField(max_length=150)\n\n\nclass Book(models.Model):\n    title = models.CharField(max_length=200)\n    year = models.IntegerField(default=2015, blank=True)\n    authors = models.ManyToManyField(User, related_name='authors', blank=True, null=True)\n\n    # \u0448\u0438\u0444\u0440\n    cypher = models.CharField(max_length=20, unique=True)\n\n    # \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c (\u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e)\n    publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE, blank=True, null=True, related_name='publisher')\n\n    def __str__(self):\n        return self.title\n\n\nclass Library(models.Model):\n    name = models.CharField(max_length=200, unique=True)\n    address = models.CharField(max_length=200, blank=True, default='Random street, 15')\n\n    def __str__(self):\n        return f'{self.name} (pk={self.pk})'\n\n\nclass ReadingRoom(models.Model):\n    number = models.PositiveSmallIntegerField(unique=True)\n    # \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u0430\u043b\u0430\n    capacity = models.PositiveSmallIntegerField(default=20, blank=True)\n    library = models.ForeignKey(Library, on_delete=models.CASCADE, related_name='library')\n\n    def __str__(self):\n        return f'\u0427\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0437\u0430\u043b \u2116{self.number} \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \"{self.library.name}\"' # (pk={self.pk})'\n\n\"\"\"\n\u043c\u043e\u0434\u0435\u043b\u044c, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043d\u0438\u0433\u0438\n\u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u0434\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438 \u0438\u0441\u0442\u043e\u0440\u0438\u0438, \n\u0442.\u043a. \u043c\u043e\u0434\u0435\u043b\u044c \u0441\u0441\u044b\u043b\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f \u0438 \u0438\u043c\u0435\u0435\u0442 \u0434\u0430\u0442\u0443 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c\n\"\"\"\nclass BookCopy(models.Model):\n    book = models.ForeignKey(Book, on_delete=models.CASCADE, related_name='book')\n    reader = models.ForeignKey(User, on_delete=models.CASCADE, related_name='reader', null=True, blank=True)\n    reading_room = models.ManyToManyField(ReadingRoom)\n    own_date = models.DateField(blank=True, null=True)\n\n    def __str__(self):\n        return f'\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043d\u0438\u0433\u0438 \"{self.book.title}\"'\n\n    \"\"\"\n    \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043a\u043d\u0438\u0433\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u043b\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432 \u0411\u0414,\n    \u0442.\u043a. \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u043c\n    \"\"\"\n</code></pre> <ul> <li><code>views.py</code></li> </ul> <pre><code>from collections import defaultdict\nfrom datetime import datetime\n\nfrom dateutil.relativedelta import relativedelta\nfrom django.db.models import F, Count, Sum, Q\nfrom django.db.models.functions import Extract, Now\nfrom rest_framework import generics, serializers, permissions, mixins\nfrom rest_framework.generics import get_object_or_404, RetrieveUpdateAPIView, GenericAPIView\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nfrom api.permissions import IsLibraryWorker\nfrom api.serializers import *\nfrom library_app.models import *\n\n\nclass CreateUserView:\n    model = User\n\n\nclass CreateReaderView(CreateUserView, generics.CreateAPIView):\n    serializer_class = ReaderSerializer\n\n\nclass CreateAuthorView(CreateUserView, generics.CreateAPIView):\n    serializer_class = AuthorSerializer\n\n\nclass ReaderBooksView(generics.ListAPIView):\n    serializer_class = BookCopySerializer\n    # \u0438\u043c\u044f GET-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\n    lookup_url_kwarg = 'reader'\n\n    def get_queryset(self):\n        author_name = self.request.query_params.get(self.lookup_url_kwarg)\n        author = get_object_or_404(User, username=author_name)\n        return BookCopy.objects.filter(reader=author)\n\n\nclass MonthAgoReadersView(generics.ListAPIView):\n    serializer_class = ReaderSerializer\n\n    def get_queryset(self):\n        # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u044f\u0435\u043c \u043a\u043d\u0438\u0433\u0438, \u0432\u0437\u044f\u0442\u044b\u0435 \u043c\u0435\u0441\u044f\u0446 \u0438 \u0431\u043e\u043b\u0435\u0435 \u043d\u0430\u0437\u0430\u0434\n        books = BookCopy.objects.filter(own_date__lte=(datetime.now().date() - relativedelta(months=1)))\n        return [book_copy.reader for book_copy in books]  # if book_copy.reader.role == User.READER]\n\n\nclass RareBooksReadersView(generics.ListAPIView):\n    serializer_class = ReaderSerializer\n\n    def get_queryset(self):\n        # \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u043f\u043e\u043b\u044e book\n        books = [\n            book['book'] for book in\n            BookCopy.objects.values('book').annotate(count=Count('*')).filter(count__lte=2)\n        ]\n\n        # \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0432 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445\u0441\u044f \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439\n        return set(book.reader for book in BookCopy.objects.filter(book__in=books))\n\n\nclass ReadersUnder20View(generics.ListAPIView):\n    serializer_class = ReaderSerializer\n\n    def get_queryset(self):\n        return User.objects.filter(\n            Q(library_card_number__isnull=False)\n            &amp;\n            Q(birth_date__gte=(datetime.now().date() - relativedelta(years=20)))\n        )\n\n\nclass ReadersEducationStatsView(APIView):\n    @staticmethod\n    def __calc_and_format_result(specific_count, all_count):\n        return f'{round(specific_count / all_count * 100, 2)}%'\n\n    def get(self, request):\n        users_count = User.objects.count()\n        secondary_education_percent = User.objects.filter(education=User.SECONDARY).count()\n        high_education_percent = User.objects.filter(education=User.HIGH).count()\n        degree_percent = User.objects.filter(is_have_degree=True).count()\n\n        return Response({\n            'secondary_education_percent': self.__calc_and_format_result(secondary_education_percent, users_count),\n            'high_education_percent': self.__calc_and_format_result(high_education_percent, users_count),\n            'degree_percent': self.__calc_and_format_result(degree_percent, users_count),\n        })\n\n\nclass RegisterReaderView(generics.UpdateAPIView):\n    serializer_class = LibraryWorkerReaderUpdateSerializer\n    queryset = User.objects.all()\n    permission_classes = [IsLibraryWorker]\n    lookup_url_kwarg = 'username'\n    lookup_field = 'username'\n\n\nclass ExcludeYearAgoReaders(APIView):\n    def post(self, request):\n        if request.user.role != User.LIBRARY_WORKER:\n            return Response({'detail': \"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0430\u0432 (\u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043f\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438)\"''})\n\n        queryset = User.objects.filter(register_date__lt=(datetime.now().date() - relativedelta(months=12)))\n        response = {'detail': [user.username for user in queryset]}\n        queryset.delete()\n        return Response(response)\n\n\nclass DeleteBookCopyView(APIView):\n    def post(self, request, **kwargs):\n        if request.user.role != User.LIBRARY_WORKER:\n            return Response({'detail': \"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0430\u0432 (\u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043f\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438)\"''})\n\n        cypher = kwargs.get('cypher')\n        queryset = BookCopy.objects.filter(book__cypher=cypher)\n\n        get_object_or_404(Book, cypher=cypher)\n        response = {'detail': {'book': [str(book_copy) for book_copy in queryset], 'cypher': cypher}}\n        queryset.delete()\n        Book.objects.get(cypher=cypher).delete()\n        return Response(response)\n\n\nclass BookRegisterView(generics.CreateAPIView):\n    permission_classes = [IsLibraryWorker]\n    serializer_class = BookSerializer\n\n\nclass ReportView(APIView):\n    def get(self, request, **kwargs):\n\n        month = request.query_params.get('month')\n\n        if month:\n            if int(month) not in range(1, 13):\n                return Response({'detail': '\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 month \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 1 \u0434\u043e 12'})\n\n        readers_for_month = User.objects.filter(\n            Q(role=User.READER) &amp;\n            Q(library_card_number__isnull=False) &amp;\n            Q(register_date__month=month) &amp;\n            Q(register_date__year=datetime.today().year)\n        )\n\n        reading_rooms_books_info = defaultdict(int)\n        reading_rooms_readers_info = defaultdict(int)\n\n        book_copies = BookCopy.objects.all()\n\n        for book_copy in book_copies:\n            for room in book_copy.reading_room.all():\n                reading_rooms_books_info[str(room)] += 1\n\n                if book_copy.reader:\n                    reading_rooms_readers_info[str(room)] += 1\n\n        response = {\n            'reading_rooms_books_count_info': {\n                reading_room: f'\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043d\u0438\u0433: {count}' for reading_room, count in reading_rooms_books_info.items()\n            },\n\n            'reading_rooms_readers_info': {\n                reading_room: f'\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439: {count}' for reading_room, count in\n                reading_rooms_readers_info.items()\n            }\n        }\n\n        reading_rooms_readers_count = list(\n            User.objects\n            .filter(Q(role=User.READER) &amp; Q(register_date__month=month) &amp; Q(register_date__year=datetime.today().year))\n            .values('reader_room')\n            .annotate(readers_count=Count('*'))\n        )\n\n        # \u043f\u0430\u0440\u044b \u0432\u0438\u0434\u0430 &lt;pk \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u0430\u043b\u0430&gt;: &lt;\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439&gt;\n        reading_rooms_readers_count_info = {\n            obj['reader_room']: obj['readers_count'] for obj in\n            reading_rooms_readers_count\n        }\n\n        # print(reading_rooms_readers_count_info)\n        all_reading_rooms_info = defaultdict(list)\n\n        # \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0432\u0438\u0434\u0430 &lt;\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438&gt;: &lt;\u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u043e\u0432 (\u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0411\u0414) \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438&gt;\n        for room in ReadingRoom.objects.all():\n            all_reading_rooms_info[str(room.library)] += [room]\n\n        # \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u043c\u0438 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u0430\u0445\n        for lib, rooms in all_reading_rooms_info.items():\n            rooms_list = []\n\n            for room in rooms:\n                # \u0435\u0441\u043b\u0438 \u043a\u043b\u044e\u0447\u0430 \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u0430\u043b\u0430 \u043d\u0435\u0442, \u0437\u043d\u0430\u0447\u0438\u0442 \u0432 \u0437\u0430\u043b\u0435 0 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439\n                readers_count = reading_rooms_readers_count_info.get(room.pk, 0)\n                rooms_list.append({str(room): readers_count})\n\n            all_reading_rooms_info[str(lib)] = rooms_list\n\n        if month:\n            response[f'readers_for_{month}_month_info'] = {\n                reading_room: count for reading_room, count in\n                all_reading_rooms_info.items()\n            }\n\n        return Response(response)\n</code></pre> <ul> <li><code>serializers.py</code></li> </ul> <pre><code>from datetime import datetime\n\nfrom rest_framework import serializers, generics\nfrom rest_framework.response import Response\n\nfrom library_app.models import *\n\n\n# \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\nclass LibraryWorkerReaderUpdateSerializer(serializers.ModelSerializer):\n\n    def update(self, instance, data):\n        # \u043c\u0435\u043d\u044f\u0435\u043c \u0432 \u0411\u0414 \u0434\u0430\u0442\u0443 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435, \u0435\u0441\u043b\u0438 \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u043d\u0435\u043f\u0443\u0441\u0442\n        instance.register_date = datetime.now().date() if data['library_card_number'] else None\n        instance.save()\n        return instance\n\n    class Meta:\n        model = User\n        fields = ['library_card_number', 'reader_room', 'register_date']\n\n\nclass ReaderSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True)\n\n    def create(self, data):\n        # \u043f\u0438\u0448\u0435\u043c \u0432 \u0411\u0414 \u0434\u0430\u0442\u0443 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435, \u0435\u0441\u043b\u0438 \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u043d\u0435\u043f\u0443\u0441\u0442\n        data['register_date'] = datetime.now().date() if data['library_card_number'] else None\n        data['role'] = User.READER\n        user = User.objects.create_user(**data)\n        return user\n\n    class Meta:\n        model = User\n        fields = ('username', 'password', 'phone', 'library_card_number', 'reader_room', 'register_date', 'education', 'is_have_degree')\n\n\nclass AuthorSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True)\n\n    def create(self, data):\n        data['role'] = User.AUTHOR\n        user = User.objects.create_user(**data)\n        return user\n\n    class Meta:\n        model = User\n        fields = ('username', 'password')\n\n\nclass ReadingRoomSerizalier(serializers.ModelSerializer):\n    class Meta:\n        model = ReadingRoom\n        fields = '__all__'\n\n\nclass BookCopySerializer(serializers.ModelSerializer):\n    book = serializers.SlugRelatedField(read_only=True, slug_field='title')\n    reader = serializers.SlugRelatedField(read_only=True, slug_field='username')\n\n    # StringRelatedField \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 \u043c\u0435\u0442\u043e\u0434\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 __str__\n    # \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0438 ReadingRoom\n    reading_rooms = serializers.StringRelatedField(many=True, source='reading_room')\n\n    class Meta:\n        model = BookCopy\n        exclude = ['id', 'reading_room']\n\n\nclass BookSerializer(serializers.ModelSerializer):\n\n    class Meta:\n        model = Book\n        fields = ['title', 'year', 'cypher']\n</code></pre> <ul> <li><code>urls.py</code></li> </ul> <pre><code>from django.urls import path, include, re_path\nfrom rest_framework_swagger.views import get_swagger_view\n\nfrom api.views import *\n\nAPI_PREFIX = 'api/v1'\n\nurlpatterns = [\n    path(f'{API_PREFIX}/auth/', include('djoser.urls')),\n    re_path(r'^auth/', include('djoser.urls.authtoken')),\n    path(f'{API_PREFIX}/reader-register/', CreateReaderView.as_view()),\n    path(f'{API_PREFIX}/author-register/', CreateAuthorView.as_view()),\n\n    # \u041a\u043d\u0438\u0433\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f (http://127.0.0.1:8000/api/v1/books/?reader=admin)\n    path(f'{API_PREFIX}/books/', ReaderBooksView.as_view()),\n\n    # \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u0438, \u0432\u0437\u044f\u0432\u0448\u0438\u0435 \u043a\u043d\u0438\u0433\u0443 \u0431\u043e\u043b\u0435\u0435 \u043c\u0435\u0441\u044f\u0446\u0430 \u043d\u0430\u0437\u0430\u0434\n    path(f'{API_PREFIX}/month-ago-readers/', MonthAgoReadersView.as_view()),\n\n    # \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u0438, \u0432\u0437\u044f\u0432\u0448\u0438\u0435 \u043a\u043d\u0438\u0433\u0438, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 2\n    path(f'{API_PREFIX}/rare-books-readers/', RareBooksReadersView.as_view()),\n\n    # \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u0438 \u043c\u043b\u0430\u0434\u0448\u0435 20 \u043b\u0435\u0442\n    path(f'{API_PREFIX}/readers-under-20/', ReadersUnder20View.as_view()),\n\n    # \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u0438 \u0432 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043d\u043e\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u043f\u043e \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n    path(f'{API_PREFIX}/readers-education-stats/', ReadersEducationStatsView.as_view()),\n\n    path(f'{API_PREFIX}/lib-reader-register/&lt;str:username&gt;/', RegisterReaderView.as_view()),\n\n    # \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0431\u043e\u043b\u0435\u0435 \u0433\u043e\u0434\u0430 \u043d\u0430\u0437\u0430\u0434\n    path(f'{API_PREFIX}/drop-year-ago-readers/', ExcludeYearAgoReaders.as_view()),\n\n    # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 \u043f\u043e \u0448\u0438\u0444\u0440\u0443 (POST-\u0437\u0430\u043f\u0440\u043e\u0441)\n    path(f'{API_PREFIX}/drop-book-copy-by-cypher/&lt;str:cypher&gt;/', DeleteBookCopyView.as_view()),\n\n    path(f'{API_PREFIX}/book-register/', BookRegisterView.as_view()),\n\n    # \u041e\u0442\u0447\u0435\u0442 (http://127.0.0.1:8000/api/v1/report/?month=1/)\n    path(f'{API_PREFIX}/report/', ReportView.as_view())\n]\n</code></pre>"},{"location":"pages/lab3_pr/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 3.1","text":""},{"location":"pages/lab3_pr/#311","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1","text":"<ul> <li><code>models.py</code></li> </ul> <pre><code>class CarOwner(AbstractUser):\n    id_owner = models.IntegerField(primary_key = True)\n    last_name = models.CharField(max_length = 30, null = False)\n    first_name = models.CharField(max_length = 30, null = False)\n    birth_day = models.DateField(null = True)\n    passport = models.IntegerField(null=True)\n    address = models.CharField(max_length=50, null=True, blank=True)\n    nationality = models.CharField(max_length=20, null=True, blank=True)\n\nclass Car(models.Model):\n    id_car = models.IntegerField(primary_key=True)\n    state_number = models.CharField(max_length=15, null=False)\n    mark_car = models.CharField(max_length=20, null=False)\n    model_car = models.CharField(max_length=20, null=False)\n    color = models.CharField(max_length=30, null=False)\n\n\nclass Ownership(models.Model):\n    id_owner_car = models.IntegerField(primary_key=True)\n    id_owner = models.ForeignKey(CarOwner, on_delete=models.CASCADE)\n    id_car = models.ForeignKey(Car, on_delete=models.CASCADE)\n    start_date = models.DateField()\n    end_date = models.DateField(null=True)\n\n\nclass DriverLicense(models.Model):\n    id_license = models.IntegerField(primary_key=True)\n    id_owner = models.ForeignKey(CarOwner, on_delete=models.CASCADE)\n    license_number = models.CharField(max_length=10, null=False)\n    type = models.CharField(max_length=10, null=False)\n    date_of_license = models.DateField()\n</code></pre> <p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439</p> <p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432</p> <pre><code>Car_owner(id_owner=1, last_name='LN1', first_name'FN1', birth_name='1990-01-1').save()\nCar_owner(id_owner=2, last_name='LN2', first_name'FN2', birth_name='1990-01-2').save()\nCar_owner(id_owner=3, last_name='LN3', first_name'FN3', birth_name='1990-01-3').save()\nCar_owner(id_owner=4, last_name='LN4', first_name'FN4', birth_name='1990-01-4').save()\nCar_owner(id_owner=5, last_name='LN5', first_name'FN5', birth_name='1990-01-5').save()\nCar_owner(id_owner=6, last_name='LN6', first_name'FN6', birth_name='1990-01-6').save()\n\nfor i in Car_owner.objects.all():\n    ...:     print(i.first_name)\n    ...: \nFN1\nFN1\nFN1\nFN1\nFN1\nFN1\n</code></pre> <p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439</p> <pre><code>Car(id_car=1, state_number='a001aa', mark_car='BMW', model_car='Model1', color='green').save()\nCar(id_car=2, state_number='a002aa', mark_car='BMW', model_car='Model2', color='green').save()\nCar(id_car=3, state_number='a003aa', mark_car='BMW', model_car='Model3', color='blue').save()\nCar(id_car=4, state_number='a004aa', mark_car='BMW', model_car='Model4', color='green').save()\nCar(id_car=5, state_number='a005aa', mark_car='BMW', model_car='Model5', color='green').save()\nCar(id_car=6, state_number='a006aa', mark_car='BMW', model_car='Model6', color='green').save()\n</code></pre> <p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0439</p> <pre><code>Driver_license(1, 1, '123', 'A', '2010-01-01').save()\nDriver_license(2, 2, '3214', 'B', '2011-01-02').save()\nDriver_license(3, 3, '41421', 'C', '2012-01-03').save()\nDriver_license(4, 4, '3212', 'A', '2013-01-04').save()\nDriver_license(5, 5, '158143', 'B', '2014-01-05').save()\nDriver_license(6, 6, '932188', 'C', '2015-01-06').save()\n</code></pre> <p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0432\u044f\u0437\u0438 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f</p> <pre><code>Ownerdhip(1, 1, 1, '2011-01-01', '2012-01-01').save()\nOwnerdhip(2, 2, 2, '2012-01-01', '2013-01-01').save()\nOwnerdhip(3, 3, 3, '2013-01-01', '2014-01-01').save()\nOwnerdhip(4, 4, 4, '2014-01-01', '2015-01-01').save()\nOwnerdhip(5, 5, 5, '2015-01-01', '2016-01-01').save()\nOwnerdhip(6, 6, 6, '2016-01-01', '2017-01-01').save()\n</code></pre>"},{"location":"pages/lab3_pr/#312","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.2","text":"<p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e:</p> <p>\u0417\u0430\u043f\u0440\u043e\u0441 1</p> <p>\u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cBMV\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c):</p> <pre><code>Car.objects.filter(mark_car=\"BMV\")\n</code></pre> <p>\u0417\u0430\u043f\u0440\u043e\u0441 2</p> <p>\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435):</p> <pre><code> Car_owner.objects.filter(first_name=\"FN1\")\n</code></pre> <p>\u0417\u0430\u043f\u0440\u043e\u0441 3</p> <p>\u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430):</p> <pre><code>take_id = Car_owner.objects.all()[3].id_owner\nDriver_license.objects.get(id_owner=take_id)\n</code></pre> <p>\u0417\u0430\u043f\u0440\u043e\u0441 4</p> <p>\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442):</p> <pre><code>CarOwner.objects.filter(ownership__id__car__color=\"green\")\n</code></pre> <p>\u0417\u0430\u043f\u0440\u043e\u0441 5</p> <p>\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435):</p> <pre><code>Ownerdhip.objects.filter(start_date__gte=\"2013-01-01\")\n</code></pre>"},{"location":"pages/lab3_pr/#313","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.3","text":"<p>\u0417\u0430\u043f\u0440\u043e\u0441 1</p> <p>\u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f:</p> <pre><code>from django.db.models import Min, Max\n\nDriver_license.objects.aggregate(date_of_license=Min(\"date_of_license\"))\n</code></pre> <p>\u0417\u0430\u043f\u0440\u043e\u0441 2</p> <p>\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435:</p> <pre><code>Ownerdhip.objects.aggregate(start_date=Max(\"start_date\"))\n</code></pre> <p>\u0417\u0430\u043f\u0440\u043e\u0441 3</p> <p>\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f:</p> <pre><code>from django.db.models import Count\n\nOwnerdhip.objects.values(\"id_owner\").annotate(Count(\"id_car\"))\n</code></pre> <p>\u0417\u0430\u043f\u0440\u043e\u0441 4</p> <p>\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438:</p> <pre><code>Car.objects.values(\"mark_car\").annotate(Count(\"id_car\"))\n</code></pre> <p>\u0417\u0430\u043f\u0440\u043e\u0441 5</p> <p>\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f:</p> <pre><code>Car_owner.objects.order_by(\"driver_license__date_of_license\")\n</code></pre>"}]}